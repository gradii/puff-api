import { Generate } from '../../../generate';
import * as ts from 'typescript';
import { generateImportDeclaration } from '../../../../common/helper';

export class GenerateEvent extends Generate {
  get filename() {
    const { slugProjectName } = this.ctx;
    return `app/workflow/${slugProjectName}/events/${slugProjectName}.events.ts`;
  }

  imports = [
    {
      from: '../../workflow-base.event', importClause: [
        'WorkflowBaseEvent',
        'WorkflowCancelEvent',
        'WorkflowEndEvent',
        'WorkflowRunningEvent',
        'WorkflowStartEvent'
      ]
    },
    {
      from: 'uuid/v4', importClause: 'uuidv4'
    }
  ];

  addedImports = [];

  constructor(public ctx) {
    super();
  }

  generage() {
    this._preGenerate();

    const { pascalProjectName } = this.ctx;

    const asts = [
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}Event`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowStartEvent')
          )]
        )],
        [
          ts.createConstructor(
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('params'),
              undefined,
              undefined,
              undefined
            )],
            ts.createBlock(
              [ts.createExpressionStatement(ts.createCall(
                ts.createSuper(),
                undefined,
                [ts.createCall(
                  ts.createIdentifier('uuidv4'),
                  undefined,
                  []
                )]
              ))],
              true
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('createInQueueEvent'),
            undefined,
            undefined,
            [],
            undefined,
            ts.createBlock(
              [ts.createReturn(ts.createNew(
                ts.createIdentifier(`${pascalProjectName}InQueueEvent`),
                undefined,
                [
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('workflowId')
                  ),
                  ts.createThis()
                ]
              ))],
              true
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('createOutQueueEvent'),
            undefined,
            undefined,
            [],
            undefined,
            ts.createBlock(
              [ts.createReturn(ts.createNew(
                ts.createIdentifier(`${pascalProjectName}OutQueueEvent`),
                undefined,
                [
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('workflowId')
                  ),
                  ts.createThis()
                ]
              ))],
              true
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('createStartEvent'),
            undefined,
            undefined,
            [],
            undefined,
            ts.createBlock(
              [ts.createReturn(ts.createNew(
                ts.createIdentifier(`${pascalProjectName}StartEvent`),
                undefined,
                [
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('workflowId')
                  ),
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('params')
                  )
                ]
              ))],
              true
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('createCancelEvent'),
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              undefined,
              undefined,
              ts.createIdentifier('message'),
              undefined,
              undefined,
              undefined
            )],
            undefined,
            ts.createBlock(
              [ts.createReturn(ts.createNew(
                ts.createIdentifier(`${pascalProjectName}CancelEvent`),
                undefined,
                [
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('workflowId')
                  ),
                  ts.createIdentifier('message')
                ]
              ))],
              true
            )
          )
        ]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}InQueueEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowBaseEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('event'),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier(`${pascalProjectName}Event`),
                undefined
              ),
              undefined
            )
          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [ts.createIdentifier('workflowId')]
            ))],
            true
          )
        )]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}OutQueueEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowBaseEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('event'),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier(`${pascalProjectName}Event`),
                undefined
              ),
              undefined
            )
          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [ts.createIdentifier('workflowId')]
            ))],
            true
          )
        )]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}StartEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowStartEvent')
          )]
        )],
        [
          ts.createConstructor(
            undefined,
            undefined,
            [
              ts.createParameter(
                undefined,
                [
                  ts.createModifier(ts.SyntaxKind.PublicKeyword),
                  ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
                ],
                undefined,
                ts.createIdentifier('workflowId'),
                undefined,
                ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
                undefined
              ),
              ts.createParameter(
                undefined,
                [
                  ts.createModifier(ts.SyntaxKind.PublicKeyword),
                  ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
                ],
                undefined,
                ts.createIdentifier('params'),
                undefined,
                undefined,
                undefined
              )
            ],
            ts.createBlock(
              [ts.createExpressionStatement(ts.createCall(
                ts.createSuper(),
                undefined,
                [ts.createIdentifier('workflowId')]
              ))],
              true
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('createSuccessEvent'),
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              undefined,
              undefined,
              ts.createIdentifier('result'),
              undefined,
              undefined,
              undefined
            )],
            undefined,
            ts.createBlock(
              [ts.createReturn(ts.createNew(
                ts.createIdentifier(`${pascalProjectName}SuccessEvent`),
                undefined,
                [
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('workflowId')
                  ),
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('params')
                  ),
                  ts.createIdentifier('result')
                ]
              ))],
              true
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('createFailureEvent'),
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              undefined,
              undefined,
              ts.createIdentifier('result'),
              undefined,
              undefined,
              undefined
            )],
            undefined,
            ts.createBlock(
              [ts.createReturn(ts.createNew(
                ts.createIdentifier(`${pascalProjectName}FailureEvent`),
                undefined,
                [
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('workflowId')
                  ),
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('params')
                  ),
                  ts.createIdentifier('result')
                ]
              ))],
              true
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('createCancelEvent'),
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              undefined,
              undefined,
              ts.createIdentifier('message'),
              ts.createToken(ts.SyntaxKind.QuestionToken),
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            )],
            undefined,
            ts.createBlock(
              [ts.createReturn(ts.createNew(
                ts.createIdentifier(`${pascalProjectName}CancelEvent`),
                undefined,
                [
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('workflowId')
                  ),
                  ts.createIdentifier('message')
                ]
              ))],
              true
            )
          )
        ]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}StepStartEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowRunningEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepName'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepStatus'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            )
          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [
                ts.createIdentifier('workflowId'),
                ts.createIdentifier('stepStatus')
              ]
            ))],
            true
          )
        )]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}RunningEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowRunningEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepName'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepStatus'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),

          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [
                ts.createIdentifier('workflowId'),
                ts.createIdentifier('stepStatus'),
              ]
            ))],
            true
          )
        )]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}StepFinishEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowRunningEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepName'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('stepStatus'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('steps'),
              undefined,
              undefined,
              ts.createArrayLiteral(
                [],
                false
              )
            )
          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [
                ts.createIdentifier('workflowId'),
                ts.createIdentifier('stepStatus'),
                ts.createIdentifier('steps'),
              ]
            ))],
            true
          )
        )]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}SuccessEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowEndEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('params'),
              undefined,
              undefined,
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('result'),
              undefined,
              undefined,
              undefined
            )
          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [ts.createIdentifier('workflowId')]
            ))],
            true
          )
        )]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}FailureEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowEndEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('params'),
              undefined,
              undefined,
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('result'),
              undefined,
              undefined,
              undefined
            )
          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [ts.createIdentifier('workflowId')]
            ))],
            true
          )
        )]
      ),
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}CancelEvent`),
        undefined,
        [ts.createHeritageClause(
          ts.SyntaxKind.ExtendsKeyword,
          [ts.createExpressionWithTypeArguments(
            undefined,
            ts.createIdentifier('WorkflowCancelEvent')
          )]
        )],
        [ts.createConstructor(
          undefined,
          undefined,
          [
            ts.createParameter(
              undefined,
              [
                ts.createModifier(ts.SyntaxKind.PublicKeyword),
                ts.createModifier(ts.SyntaxKind.ReadonlyKeyword)
              ],
              undefined,
              ts.createIdentifier('workflowId'),
              undefined,
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            ),
            ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PublicKeyword)],
              undefined,
              ts.createIdentifier('message'),
              ts.createToken(ts.SyntaxKind.QuestionToken),
              ts.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
              undefined
            )
          ],
          ts.createBlock(
            [ts.createExpressionStatement(ts.createCall(
              ts.createSuper(),
              undefined,
              [ts.createIdentifier('workflowId')]
            ))],
            true
          )
        )]
      )
    ];

    return [
      ...this._normalizeImports().map((it) => {
        return generateImportDeclaration(it.from, it.importClause);
      }),
      ...asts
    ];

  }
}
