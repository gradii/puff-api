import { Generate } from '../../../generate';
import * as ts from 'typescript';
import { generateImportDeclaration } from '../../../../common/helper';

export class GenerateCommonCommandHandler extends Generate {
  get filename() {
    const { slugProjectName } = this.ctx;
    return `app/workflow/${slugProjectName}/actions/common-command-handler.ts`;
  }

  imports = [
    { from: '@nestjs/cqrs', importClause: ['EventBus'] },
    { from: 'rxjs', importClause: ['EMPTY', 'Observable', 'ObservableInput', 'of'] },
    { from: 'rxjs/operators', importClause: ['catchError', 'tap', 'mergeMap', 'map'] },
    { from: '../../step-status', importClause: ['StepStatus', 'StepStatusDefaultMessage'] },
    { from: 'uuid', importClause: [{ propertyName: 'v4', name: 'uuidv4' }] }
  ];

  constructor(public ctx) {
    super();
  }

  protected _preGenerate() {
    const {
            slugProjectName,
            pascalProjectName,
            pascalWorkflowActionModelName,
            slugWorkflowActionModelName
          } = this.ctx;
    this.addedImports.push(
      {
        from: `../events/${slugProjectName}.events`, importClause: [
          `${pascalProjectName}StartEvent`,
          `${pascalProjectName}SuccessEvent`,
          `${pascalProjectName}RunningEvent`,
          `${pascalProjectName}FailureEvent`,
          `${pascalProjectName}StepStartEvent`,
          `${pascalProjectName}StepFinishEvent`
        ]
      }

      // { from: `./${slugWorkflowActionModelName}-action.command`, importClause: [`${pascalWorkflowActionModelName}ActionCommand`] },
    );
  }

  generate() {
    this._preGenerate();

    const { pascalProjectName } = this.ctx;

    // super.generate();
    const asts = [
      ts.createClassDeclaration(
        undefined,
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier('CommonCommandHandler'),
        undefined,
        undefined,
        [
          ts.createConstructor(
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.ProtectedKeyword)],
              undefined,
              ts.createIdentifier('eventBus'),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier('EventBus'),
                undefined
              ),
              undefined
            )],
            ts.createBlock(
              [],
              true
            )
          ),
          ts.createMethod(
            undefined,
            [ts.createModifier(ts.SyntaxKind.ProtectedKeyword)],
            undefined,
            ts.createIdentifier('_wrapActionStep'),
            undefined,
            undefined,
            [
              ts.createParameter(
                undefined,
                undefined,
                undefined,
                ts.createIdentifier('stepName'),
                undefined,
                undefined,
                undefined
              ),
              ts.createParameter(
                undefined,
                undefined,
                undefined,
                ts.createIdentifier('ctx'),
                undefined,
                undefined,
                undefined
              ),
              ts.createParameter(
                undefined,
                undefined,
                undefined,
                ts.createIdentifier('operatorFn'),
                undefined,
                undefined,
                undefined
              )
            ],
            undefined,
            ts.createBlock(
              [
                ts.createVariableStatement(
                  undefined,
                  ts.createVariableDeclarationList(
                    [ts.createVariableDeclaration(
                      ts.createObjectBindingPattern([ts.createBindingElement(
                        undefined,
                        undefined,
                        ts.createIdentifier('steps'),
                        undefined
                      )]),
                      undefined,
                      ts.createIdentifier('ctx')
                    )],
                    ts.NodeFlags.Const
                  )
                ),
                ts.createVariableStatement(
                  undefined,
                  ts.createVariableDeclarationList(
                    [ts.createVariableDeclaration(
                      ts.createIdentifier('stepUuid'),
                      undefined,
                      ts.createCall(
                        ts.createIdentifier('uuidv4'),
                        undefined,
                        []
                      )
                    )],
                    ts.NodeFlags.Const
                  )
                ),
                ts.createReturn(ts.createArrowFunction(
                  undefined,
                  [ts.createTypeParameterDeclaration(
                    ts.createIdentifier('T'),
                    undefined,
                    undefined
                  )],
                  [ts.createParameter(
                    undefined,
                    undefined,
                    undefined,
                    ts.createIdentifier('source'),
                    undefined,
                    ts.createTypeReferenceNode(
                      ts.createIdentifier('Observable'),
                      [ts.createTypeReferenceNode(
                        ts.createIdentifier('T'),
                        undefined
                      )]
                    ),
                    undefined
                  )],
                  undefined,
                  ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                  ts.createBlock(
                    [ts.createReturn(ts.createCall(
                      ts.createPropertyAccess(
                        ts.createIdentifier('source'),
                        ts.createIdentifier('pipe')
                      ),
                      undefined,
                      [
                        ts.createCall(
                          ts.createIdentifier('tap'),
                          undefined,
                          [ts.createArrowFunction(
                            undefined,
                            undefined,
                            [],
                            undefined,
                            ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                            ts.createBlock(
                              [
                                ts.createVariableStatement(
                                  undefined,
                                  ts.createVariableDeclarationList(
                                    [ts.createVariableDeclaration(
                                      ts.createIdentifier('runningEvent'),
                                      undefined,
                                      ts.createNew(
                                        ts.createIdentifier(`${pascalProjectName}StepStartEvent`),
                                        undefined,
                                        [
                                          ts.createPropertyAccess(
                                            ts.createIdentifier('ctx'),
                                            ts.createIdentifier('workflowId')
                                          ),
                                          ts.createIdentifier('stepUuid'),
                                          ts.createIdentifier('stepName'),
                                          ts.createStringLiteral('running start step')
                                        ]
                                      )
                                    )],
                                    ts.NodeFlags.Const
                                  )
                                ),
                                ts.createExpressionStatement(ts.createCall(
                                  ts.createPropertyAccess(
                                    ts.createIdentifier('steps'),
                                    ts.createIdentifier('push')
                                  ),
                                  undefined,
                                  [ts.createObjectLiteral(
                                    [
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('id'),
                                        ts.createIdentifier('stepUuid')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('stepName'),
                                        ts.createIdentifier('stepName')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('status'),
                                        ts.createPropertyAccess(
                                          ts.createIdentifier('StepStatus'),
                                          ts.createIdentifier('StartStatus')
                                        )
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('event'),
                                        ts.createIdentifier('runningEvent')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('info'),
                                        ts.createStringLiteral('start')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('message'),
                                        ts.createCall(
                                          ts.createPropertyAccess(
                                            ts.createIdentifier('StepStatusDefaultMessage'),
                                            ts.createIdentifier('SuccessMessage')
                                          ),
                                          undefined,
                                          [ts.createIdentifier('stepName')]
                                        )
                                      )
                                    ],
                                    true
                                  )]
                                )),
                                ts.createExpressionStatement(ts.createCall(
                                  ts.createPropertyAccess(
                                    ts.createPropertyAccess(
                                      ts.createThis(),
                                      ts.createIdentifier('eventBus')
                                    ),
                                    ts.createIdentifier('publish')
                                  ),
                                  undefined,
                                  [ts.createIdentifier('runningEvent')]
                                ))
                              ],
                              true
                            )
                          )]
                        ),
                        ts.createCall(
                          ts.createIdentifier('mergeMap'),
                          undefined,
                          [ts.createArrowFunction(
                            undefined,
                            undefined,
                            [ts.createParameter(
                              undefined,
                              undefined,
                              undefined,
                              ts.createIdentifier('arg'),
                              undefined,
                              undefined,
                              undefined
                            )],
                            undefined,
                            ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                            ts.createBlock(
                              [ts.createReturn(ts.createCall(
                                ts.createPropertyAccess(
                                  ts.createCall(
                                    ts.createIdentifier('of'),
                                    undefined,
                                    [ts.createIdentifier('arg')]
                                  ),
                                  ts.createIdentifier('pipe')
                                ),
                                undefined,
                                [
                                  ts.createIdentifier('operatorFn'),
                                  ts.createCall(
                                    ts.createIdentifier('map'),
                                    undefined,
                                    [ts.createArrowFunction(
                                      undefined,
                                      undefined,
                                      [ts.createParameter(
                                        undefined,
                                        undefined,
                                        undefined,
                                        ts.createIdentifier('it'),
                                        undefined,
                                        undefined,
                                        undefined
                                      )],
                                      undefined,
                                      ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                      ts.createParen(ts.createObjectLiteral(
                                        [
                                          ts.createSpreadAssignment(ts.createIdentifier('arg')),
                                          ts.createPropertyAssignment(
                                            ts.createIdentifier('result'),
                                            ts.createIdentifier('it')
                                          )
                                        ],
                                        false
                                      ))
                                    )]
                                  )
                                ]
                              ))],
                              true
                            )
                          )]
                        ),
                        ts.createCall(
                          ts.createIdentifier('tap'),
                          undefined,
                          [ts.createArrowFunction(
                            undefined,
                            undefined,
                            [],
                            undefined,
                            ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                            ts.createBlock(
                              [
                                ts.createVariableStatement(
                                  undefined,
                                  ts.createVariableDeclarationList(
                                    [ts.createVariableDeclaration(
                                      ts.createIdentifier('runningEvent'),
                                      undefined,
                                      ts.createNew(
                                        ts.createIdentifier(`${pascalProjectName}StepFinishEvent`),
                                        undefined,
                                        [
                                          ts.createPropertyAccess(
                                            ts.createIdentifier('ctx'),
                                            ts.createIdentifier('workflowId')
                                          ),
                                          ts.createIdentifier('stepUuid'),
                                          ts.createIdentifier('stepName'),
                                          ts.createStringLiteral('success step'),
                                          ts.createIdentifier('steps')
                                        ]
                                      )
                                    )],
                                    ts.NodeFlags.Const
                                  )
                                ),
                                ts.createExpressionStatement(ts.createCall(
                                  ts.createPropertyAccess(
                                    ts.createIdentifier('steps'),
                                    ts.createIdentifier('push')
                                  ),
                                  undefined,
                                  [ts.createObjectLiteral(
                                    [
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('id'),
                                        ts.createIdentifier('stepUuid')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('stepName'),
                                        ts.createIdentifier('stepName')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('status'),
                                        ts.createPropertyAccess(
                                          ts.createIdentifier('StepStatus'),
                                          ts.createIdentifier('SuccessStatus')
                                        )
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('event'),
                                        ts.createIdentifier('runningEvent')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('info'),
                                        ts.createStringLiteral('success')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('message'),
                                        ts.createCall(
                                          ts.createPropertyAccess(
                                            ts.createIdentifier('StepStatusDefaultMessage'),
                                            ts.createIdentifier('SuccessMessage')
                                          ),
                                          undefined,
                                          [ts.createIdentifier('stepName')]
                                        )
                                      )
                                    ],
                                    true
                                  )]
                                )),
                                ts.createExpressionStatement(ts.createCall(
                                  ts.createPropertyAccess(
                                    ts.createPropertyAccess(
                                      ts.createThis(),
                                      ts.createIdentifier('eventBus')
                                    ),
                                    ts.createIdentifier('publish')
                                  ),
                                  undefined,
                                  [ts.createIdentifier('runningEvent')]
                                ))
                              ],
                              true
                            )
                          )]
                        ),
                        ts.createCall(
                          ts.createIdentifier('catchError'),
                          undefined,
                          [ts.createArrowFunction(
                            undefined,
                            undefined,
                            [ts.createParameter(
                              undefined,
                              undefined,
                              undefined,
                              ts.createIdentifier('err'),
                              undefined,
                              undefined,
                              undefined
                            )],
                            undefined,
                            ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                            ts.createBlock(
                              [
                                ts.createVariableStatement(
                                  undefined,
                                  ts.createVariableDeclarationList(
                                    [ts.createVariableDeclaration(
                                      ts.createIdentifier('runningEvent'),
                                      undefined,
                                      ts.createNew(
                                        ts.createIdentifier(`${pascalProjectName}StepFinishEvent`),
                                        undefined,
                                        [
                                          ts.createPropertyAccess(
                                            ts.createIdentifier('ctx'),
                                            ts.createIdentifier('workflowId')
                                          ),
                                          ts.createIdentifier('stepUuid'),
                                          ts.createIdentifier('stepName'),
                                          ts.createStringLiteral('fail step'),
                                          ts.createIdentifier('steps')
                                        ]
                                      )
                                    )],
                                    ts.NodeFlags.Const
                                  )
                                ),
                                ts.createExpressionStatement(ts.createCall(
                                  ts.createPropertyAccess(
                                    ts.createIdentifier('steps'),
                                    ts.createIdentifier('push')
                                  ),
                                  undefined,
                                  [ts.createObjectLiteral(
                                    [
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('id'),
                                        ts.createIdentifier('stepUuid')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('stepName'),
                                        ts.createIdentifier('stepName')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('status'),
                                        ts.createPropertyAccess(
                                          ts.createIdentifier('StepStatus'),
                                          ts.createIdentifier('FailureStatus')
                                        )
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('event'),
                                        ts.createIdentifier('runningEvent')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('info'),
                                        ts.createStringLiteral('failure')
                                      ),
                                      ts.createPropertyAssignment(
                                        ts.createIdentifier('message'),
                                        ts.createCall(
                                          ts.createPropertyAccess(
                                            ts.createIdentifier('StepStatusDefaultMessage'),
                                            ts.createIdentifier('FailureMessage')
                                          ),
                                          undefined,
                                          [ts.createIdentifier('stepName')]
                                        )
                                      )
                                    ],
                                    true
                                  )]
                                )),
                                ts.createExpressionStatement(ts.createCall(
                                  ts.createPropertyAccess(
                                    ts.createPropertyAccess(
                                      ts.createThis(),
                                      ts.createIdentifier('eventBus')
                                    ),
                                    ts.createIdentifier('publish')
                                  ),
                                  undefined,
                                  [ts.createIdentifier('runningEvent')]
                                )),
                                ts.createIf(
                                  ts.createBinary(
                                    ts.createIdentifier('err'),
                                    ts.createToken(ts.SyntaxKind.InstanceOfKeyword),
                                    ts.createIdentifier(`${pascalProjectName}FailureEvent`)
                                  ),
                                  ts.createBlock(
                                    [ts.createThrow(ts.createIdentifier('err'))],
                                    true
                                  ),
                                  ts.createBlock(
                                    [
                                      ts.createVariableStatement(
                                        undefined,
                                        ts.createVariableDeclarationList(
                                          [ts.createVariableDeclaration(
                                            ts.createIdentifier('failed'),
                                            undefined,
                                            ts.createNew(
                                              ts.createIdentifier(`${pascalProjectName}FailureEvent`),
                                              undefined,
                                              [
                                                ts.createPropertyAccess(
                                                  ts.createIdentifier('ctx'),
                                                  ts.createIdentifier('workflowId')
                                                ),
                                                ts.createPropertyAccess(
                                                  ts.createIdentifier('ctx'),
                                                  ts.createIdentifier('params')
                                                ),
                                                ts.createIdentifier('err')
                                              ]
                                            )
                                          )],
                                          ts.NodeFlags.Const
                                        )
                                      ),
                                      ts.createExpressionStatement(ts.createCall(
                                        ts.createPropertyAccess(
                                          ts.createPropertyAccess(
                                            ts.createThis(),
                                            ts.createIdentifier('eventBus')
                                          ),
                                          ts.createIdentifier('publish')
                                        ),
                                        undefined,
                                        [ts.createIdentifier('failed')]
                                      )),
                                      ts.createThrow(ts.createIdentifier('failed'))
                                    ],
                                    true
                                  )
                                )

                              ],
                              true
                            )
                          )]
                        ),
                        ts.createCall(
                          ts.createIdentifier('tap'),
                          undefined,
                          [ts.createArrowFunction(
                            undefined,
                            undefined,
                            [],
                            undefined,
                            ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                            ts.createBlock(
                              [],
                              true
                            )
                          )]
                        )
                      ]
                    ))],
                    true
                  )
                ))
              ],
              true
            )
          )
        ]
      )

    ];

    return [
      ...this._normalizeImports().map(it => {
        return generateImportDeclaration(it.from, it.importClause);
      }),
      ...asts
    ];
  }

  protected _postGenerate() {
    // super._postGenerate();
  }
}
