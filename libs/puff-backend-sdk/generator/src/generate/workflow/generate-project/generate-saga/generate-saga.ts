import { Generate } from '../../../generate';
import * as ts from 'typescript';
import { generateImportDeclaration } from '../../../../common/helper';

export class GenerateSaga extends Generate {

  get filename() {
    const { slugProjectName } = this.ctx;
    return `app/workflow/${slugProjectName}/sagas/${slugProjectName}-saga.service.ts`;
  }

  imports = [
    { importClause: ['Injectable'], from: '@nestjs/common' },
    { importClause: ['EventBus', 'ICommand', 'ofType', 'Saga'], from: '@nestjs/cqrs' },
    { importClause: ['Observable', 'of'], from: 'rxjs' },

    { importClause: ['filter', 'map', 'mergeMap', 'take', 'tap', 'timeoutWith'], from: 'rxjs/operators' },

    { importClause: ['WorkflowBaseEvent', 'WorkflowEndEvent'], from: '../../workflow-base.event' },
    { importClause: ['KillActionCommand'], from: '../../kill-action.command' }
  ];

  constructor(public ctx) {
    super();
  }

  protected _preGenerate() {
    // super._preGenerate();

    const { pascalProjectName, slugProjectName, actionName, slugActionName, pascalActionName } = this.ctx;

    this.addedImports.push(
      {
        importClause: [
          `${pascalProjectName}CancelEvent`,
          `${pascalProjectName}Event`,
          `${pascalProjectName}FailureEvent`,
          `${pascalProjectName}OutQueueEvent`,
          `${pascalProjectName}SuccessEvent`
        ], from     : `../events/${slugProjectName}.events`
      },
      { importClause: [`${pascalActionName}ActionCommand`], from: `../actions/${slugActionName}-action.command` }
    );
  }

  generate() {
    this._preGenerate();

    const { pascalProjectName, slugProjectName, actionName, slugActionName, pascalActionName } = this.ctx;

    const asts = [

      ts.createClassDeclaration(
        [ts.createDecorator(ts.createCall(
          ts.createIdentifier('Injectable'),
          undefined,
          []
        ))],
        [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
        ts.createIdentifier(`${pascalProjectName}SagaService`),
        undefined,
        undefined,
        [
          ts.createProperty(
            undefined,
            undefined,
            ts.createIdentifier('timeout'),
            undefined,
            undefined,
            ts.createBinary(
              ts.createNumericLiteral('5'),
              ts.createToken(ts.SyntaxKind.AsteriskToken),
              ts.createNumericLiteral('1000')
            )
          ),
          ts.createConstructor(
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              [ts.createModifier(ts.SyntaxKind.PrivateKeyword)],
              undefined,
              ts.createIdentifier('eventBus'),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier('EventBus'),
                undefined
              ),
              undefined
            )],
            ts.createBlock(
              [],
              true
            )
          ),
          ts.createProperty(
            [ts.createDecorator(ts.createCall(
              ts.createIdentifier('Saga'),
              undefined,
              []
            ))],
            undefined,
            ts.createIdentifier('sagaTest001'),
            undefined,
            undefined,
            ts.createArrowFunction(
              undefined,
              undefined,
              [ts.createParameter(
                undefined,
                undefined,
                undefined,
                ts.createIdentifier('events$'),
                undefined,
                ts.createTypeReferenceNode(
                  ts.createIdentifier('Observable'),
                  [ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)]
                ),
                undefined
              )],
              ts.createTypeReferenceNode(
                ts.createIdentifier('Observable'),
                [ts.createTypeReferenceNode(
                  ts.createIdentifier('ICommand'),
                  undefined
                )]
              ),
              ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
              ts.createBlock(
                [ts.createReturn(ts.createCall(
                  ts.createPropertyAccess(
                    ts.createThis(),
                    ts.createIdentifier('_bindSaga')
                  ),
                  undefined,
                  [ts.createIdentifier('events$')]
                ))],
                true
              )
            )
          ),
          ts.createMethod(
            undefined,
            undefined,
            undefined,
            ts.createIdentifier('_bindSaga'),
            undefined,
            undefined,
            [ts.createParameter(
              undefined,
              undefined,
              undefined,
              ts.createIdentifier('events$'),
              undefined,
              ts.createTypeReferenceNode(
                ts.createIdentifier('Observable'),
                [ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)]
              ),
              undefined
            )],
            ts.createTypeReferenceNode(
              ts.createIdentifier('Observable'),
              [ts.createTypeReferenceNode(
                ts.createIdentifier('ICommand'),
                undefined
              )]
            ),
            ts.createBlock(
              [ts.createReturn(ts.createCall(
                ts.createPropertyAccess(
                  ts.createIdentifier('events$'),
                  ts.createIdentifier('pipe')
                ),
                undefined,
                [
                  ts.createCall(
                    ts.createIdentifier('ofType'),
                    undefined,
                    [ts.createIdentifier(`${pascalProjectName}Event`)]
                  ),
                  ts.createCall(
                    ts.createIdentifier('tap'),
                    undefined,
                    [ts.createArrowFunction(
                      undefined,
                      undefined,
                      [ts.createParameter(
                        undefined,
                        undefined,
                        undefined,
                        ts.createIdentifier('event'),
                        undefined,
                        ts.createTypeReferenceNode(
                          ts.createIdentifier(`${pascalProjectName}Event`),
                          undefined
                        ),
                        undefined
                      )],
                      undefined,
                      ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                      ts.createBlock(
                        [ts.createExpressionStatement(ts.createCall(
                          ts.createPropertyAccess(
                            ts.createPropertyAccess(
                              ts.createThis(),
                              ts.createIdentifier('eventBus')
                            ),
                            ts.createIdentifier('publish')
                          ),
                          undefined,
                          [ts.createCall(
                            ts.createPropertyAccess(
                              ts.createIdentifier('event'),
                              ts.createIdentifier('createInQueueEvent')
                            ),
                            undefined,
                            []
                          )]
                        ))],
                        true
                      )
                    )]
                  ),
                  ts.createCall(
                    ts.createIdentifier('mergeMap'),
                    undefined,
                    [
                      ts.createArrowFunction(
                        undefined,
                        undefined,
                        [ts.createParameter(
                          undefined,
                          undefined,
                          undefined,
                          ts.createIdentifier('event'),
                          undefined,
                          ts.createTypeReferenceNode(
                            ts.createIdentifier(`${pascalProjectName}Event`),
                            undefined
                          ),
                          undefined
                        )],
                        undefined,
                        ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        ts.createBlock(
                          [ts.createReturn(ts.createNew(
                            ts.createIdentifier('Observable'),
                            undefined,
                            [ts.createArrowFunction(
                              undefined,
                              undefined,
                              [ts.createParameter(
                                undefined,
                                undefined,
                                undefined,
                                ts.createIdentifier('subscriber'),
                                undefined,
                                undefined,
                                undefined
                              )],
                              undefined,
                              ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                              ts.createBlock(
                                [
                                  ts.createVariableStatement(
                                    undefined,
                                    ts.createVariableDeclarationList(
                                      [ts.createVariableDeclaration(
                                        ts.createIdentifier('outQueueEvent'),
                                        undefined,
                                        ts.createCall(
                                          ts.createPropertyAccess(
                                            ts.createIdentifier('event'),
                                            ts.createIdentifier('createOutQueueEvent')
                                          ),
                                          undefined,
                                          []
                                        )
                                      )],
                                      ts.NodeFlags.Const
                                    )
                                  ),
                                  ts.createExpressionStatement(ts.createCall(
                                    ts.createPropertyAccess(
                                      ts.createPropertyAccess(
                                        ts.createThis(),
                                        ts.createIdentifier('eventBus')
                                      ),
                                      ts.createIdentifier('publish')
                                    ),
                                    undefined,
                                    [ts.createIdentifier('outQueueEvent')]
                                  )),
                                  ts.createExpressionStatement(ts.createCall(
                                    ts.createPropertyAccess(
                                      ts.createIdentifier('subscriber'),
                                      ts.createIdentifier('next')
                                    ),
                                    undefined,
                                    [ts.createIdentifier('event')]
                                  )),
                                  ts.createExpressionStatement(ts.createCall(
                                    ts.createPropertyAccess(
                                      ts.createIdentifier('subscriber'),
                                      ts.createIdentifier('next')
                                    ),
                                    undefined,
                                    [ts.createIdentifier('outQueueEvent')]
                                  )),
                                  ts.createVariableStatement(
                                    undefined,
                                    ts.createVariableDeclarationList(
                                      [ts.createVariableDeclaration(
                                        ts.createIdentifier('innerSubscription'),
                                        undefined,
                                        ts.createCall(
                                          ts.createPropertyAccess(
                                            ts.createCall(
                                              ts.createPropertyAccess(
                                                ts.createIdentifier('events$'),
                                                ts.createIdentifier('pipe')
                                              ),
                                              undefined,
                                              [
                                                ts.createCall(
                                                  ts.createIdentifier('filter'),
                                                  [ts.createTypeReferenceNode(
                                                    ts.createIdentifier('WorkflowBaseEvent'),
                                                    undefined
                                                  )],
                                                  [ts.createArrowFunction(
                                                    undefined,
                                                    undefined,
                                                    [ts.createParameter(
                                                      undefined,
                                                      undefined,
                                                      undefined,
                                                      ts.createIdentifier('it'),
                                                      undefined,
                                                      undefined,
                                                      undefined
                                                    )],
                                                    undefined,
                                                    ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                                    ts.createBinary(
                                                      ts.createPropertyAccess(
                                                        ts.createIdentifier('it'),
                                                        ts.createIdentifier('workflowId')
                                                      ),
                                                      ts.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),
                                                      ts.createPropertyAccess(
                                                        ts.createIdentifier('event'),
                                                        ts.createIdentifier('workflowId')
                                                      )
                                                    )
                                                  )]
                                                ),
                                                ts.createCall(
                                                  ts.createIdentifier('ofType'),
                                                  [
                                                    ts.createTypeReferenceNode(
                                                      ts.createIdentifier('WorkflowBaseEvent'),
                                                      undefined
                                                    ),
                                                    ts.createTypeReferenceNode(
                                                      ts.createIdentifier('WorkflowEndEvent'),
                                                      undefined
                                                    )
                                                  ],
                                                  [
                                                    ts.createIdentifier(`${pascalProjectName}SuccessEvent`),
                                                    ts.createIdentifier(`${pascalProjectName}FailureEvent`),
                                                    ts.createIdentifier(`${pascalProjectName}CancelEvent`)
                                                  ]
                                                ),
                                                ts.createCall(
                                                  ts.createIdentifier('take'),
                                                  undefined,
                                                  [ts.createNumericLiteral('5')]
                                                ),
                                                ts.createCall(
                                                  ts.createIdentifier('timeoutWith'),
                                                  undefined,
                                                  [
                                                    ts.createPropertyAccess(
                                                      ts.createThis(),
                                                      ts.createIdentifier('timeout')
                                                    ),
                                                    ts.createCall(
                                                      ts.createPropertyAccess(
                                                        ts.createCall(
                                                          ts.createIdentifier('of'),
                                                          undefined,
                                                          [ts.createCall(
                                                            ts.createPropertyAccess(
                                                              ts.createIdentifier('event'),
                                                              ts.createIdentifier('createCancelEvent')
                                                            ),
                                                            undefined,
                                                            [ts.createTemplateExpression(
                                                              ts.createTemplateHead(
                                                                'workflow timeout of "',
                                                                'workflow timeout of "'
                                                              ),
                                                              [ts.createTemplateSpan(
                                                                ts.createBinary(
                                                                  ts.createPropertyAccess(
                                                                    ts.createThis(),
                                                                    ts.createIdentifier('timeout')
                                                                  ),
                                                                  ts.createToken(ts.SyntaxKind.SlashToken),
                                                                  ts.createNumericLiteral('1000')
                                                                ),
                                                                ts.createTemplateTail(
                                                                  's"',
                                                                  's"'
                                                                )
                                                              )]
                                                            )]
                                                          )]
                                                        ),
                                                        ts.createIdentifier('pipe')
                                                      ),
                                                      undefined,
                                                      [ts.createCall(
                                                        ts.createIdentifier('tap'),
                                                        undefined,
                                                        [ts.createArrowFunction(
                                                          undefined,
                                                          undefined,
                                                          [ts.createParameter(
                                                            undefined,
                                                            undefined,
                                                            undefined,
                                                            ts.createIdentifier('evt'),
                                                            undefined,
                                                            undefined,
                                                            undefined
                                                          )],
                                                          undefined,
                                                          ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                                          ts.createBlock(
                                                            [
                                                              ts.createExpressionStatement(ts.createCall(
                                                                ts.createPropertyAccess(
                                                                  ts.createIdentifier('subscriber'),
                                                                  ts.createIdentifier('next')
                                                                ),
                                                                undefined,
                                                                [ts.createIdentifier('evt')]
                                                              )),
                                                              ts.createExpressionStatement(ts.createCall(
                                                                ts.createPropertyAccess(
                                                                  ts.createIdentifier('subscriber'),
                                                                  ts.createIdentifier('complete')
                                                                ),
                                                                undefined,
                                                                []
                                                              )),
                                                              ts.createExpressionStatement(ts.createCall(
                                                                ts.createPropertyAccess(
                                                                  ts.createIdentifier('innerSubscription'),
                                                                  ts.createIdentifier('unsubscribe')
                                                                ),
                                                                undefined,
                                                                []
                                                              )),
                                                              ts.createExpressionStatement(ts.createCall(
                                                                ts.createPropertyAccess(
                                                                  ts.createPropertyAccess(
                                                                    ts.createThis(),
                                                                    ts.createIdentifier('eventBus')
                                                                  ),
                                                                  ts.createIdentifier('publish')
                                                                ),
                                                                undefined,
                                                                [ts.createIdentifier('evt')]
                                                              ))
                                                            ],
                                                            true
                                                          )
                                                        )]
                                                      )]
                                                    )
                                                  ]
                                                ),
                                                ts.createCall(
                                                  ts.createIdentifier('map'),
                                                  undefined,
                                                  [ts.createArrowFunction(
                                                    undefined,
                                                    undefined,
                                                    [ts.createParameter(
                                                      undefined,
                                                      undefined,
                                                      undefined,
                                                      ts.createIdentifier('evt'),
                                                      undefined,
                                                      ts.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
                                                      undefined
                                                    )],
                                                    undefined,
                                                    ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                                    ts.createBlock(
                                                      [
                                                        ts.createExpressionStatement(ts.createCall(
                                                          ts.createPropertyAccess(
                                                            ts.createIdentifier('subscriber'),
                                                            ts.createIdentifier('next')
                                                          ),
                                                          undefined,
                                                          [ts.createIdentifier('evt')]
                                                        )),
                                                        ts.createExpressionStatement(ts.createCall(
                                                          ts.createPropertyAccess(
                                                            ts.createIdentifier('subscriber'),
                                                            ts.createIdentifier('complete')
                                                          ),
                                                          undefined,
                                                          []
                                                        ))
                                                      ],
                                                      true
                                                    )
                                                  )]
                                                )
                                              ]
                                            ),
                                            ts.createIdentifier('subscribe')
                                          ),
                                          undefined,
                                          []
                                        )
                                      )],
                                      ts.NodeFlags.Const
                                    )
                                  ),
                                  ts.createReturn(ts.createArrowFunction(
                                    undefined,
                                    undefined,
                                    [],
                                    undefined,
                                    ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                                    ts.createBlock(
                                      [ts.createExpressionStatement(ts.createCall(
                                        ts.createPropertyAccess(
                                          ts.createIdentifier('innerSubscription'),
                                          ts.createIdentifier('unsubscribe')
                                        ),
                                        undefined,
                                        []
                                      ))],
                                      true
                                    )
                                  ))
                                ],
                                true
                              )
                            )]
                          ))],
                          true
                        )
                      ),
                      ts.createNumericLiteral('5')
                    ]
                  ),
                  ts.createCall(
                    ts.createIdentifier('map'),
                    undefined,
                    [ts.createArrowFunction(
                      undefined,
                      undefined,
                      [ts.createParameter(
                        undefined,
                        undefined,
                        undefined,
                        ts.createIdentifier('event'),
                        undefined,
                        undefined,
                        undefined
                      )],
                      undefined,
                      ts.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                      ts.createBlock(
                        [ts.createIf(
                          ts.createBinary(
                            ts.createIdentifier('event'),
                            ts.createToken(ts.SyntaxKind.InstanceOfKeyword),
                            ts.createIdentifier(`${pascalProjectName}OutQueueEvent`)
                          ),
                          ts.createBlock(
                            [ts.createReturn(ts.createNew(
                              ts.createIdentifier(`${pascalActionName}ActionCommand`),
                              undefined,
                              [
                                ts.createPropertyAccess(
                                  ts.createIdentifier('event'),
                                  ts.createIdentifier('workflowId')
                                ),
                                ts.createPropertyAccess(
                                  ts.createPropertyAccess(
                                    ts.createIdentifier('event'),
                                    ts.createIdentifier('event')
                                  ),
                                  ts.createIdentifier('params')
                                ),
                                ts.createPropertyAccess(
                                  ts.createIdentifier('event'),
                                  ts.createIdentifier('event')
                                )
                              ]
                            ))],
                            true
                          ),
                          ts.createIf(
                            ts.createBinary(
                              ts.createIdentifier('event'),
                              ts.createToken(ts.SyntaxKind.InstanceOfKeyword),
                              ts.createIdentifier(`${pascalProjectName}CancelEvent`)
                            ),
                            ts.createBlock(
                              [ts.createReturn(ts.createNew(
                                ts.createIdentifier('KillActionCommand'),
                                undefined,
                                [ts.createPropertyAccess(
                                  ts.createIdentifier('event'),
                                  ts.createIdentifier('workflowId')
                                )]
                              ))],
                              true
                            ),
                            undefined
                          )
                        )],
                        true
                      )
                    )]
                  )
                ]
              ))],
              true
            )
          )
        ]
      )
    ];

    const resultAsts = [
      ...this._normalizeImports().map(it => {
        return generateImportDeclaration(it.from, it.importClause);
      }),
      ...asts
    ];

    this._postGenerate();

    return resultAsts;
  }
}
